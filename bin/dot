#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help () {
  echo "Uso: $BIN_NAME <comando>"
  echo
  echo "Comandos:"
  echo "   clean            Limpar caches (brew, cargo, gem, pip)"
  echo "   dock             Aplicar configurações do Dock do macOS"
  echo "   edit             Abrir dotfiles no IDE ($VISUAL) e Git GUI ($VISUAL_GIT)"
  echo "   help             Esta mensagem de ajuda"
  echo "   macos            Aplicar padrões de sistema do macOS"
  echo "   test             Executar testes"
  echo "   update           Atualizar pacotes e gerenciadores (brew, casks, cargo, pip3, npm, gems, macOS)"
}

sub_clean () {
  echo "$ brew cleanup"
  brew cleanup
  echo "$ cargo cache --autoclean"
  cargo cache --autoclean
  echo "$ gem cleanup"
  gem cleanup
  echo "$ pip cache purge"
  pip cache purge
}

sub_dock () {
  . "${DOTFILES_DIR}/macos/dock.sh" && echo "Dock recarregado."
}

sub_edit () {
  sh -c "$VISUAL $DOTFILES_DIR"
  sh -c "$VISUAL_GIT $DOTFILES_DIR"
}

sub_test () {
  bats "$DOTFILES_DIR"/test/*.bats
}

sub_update () {
  topgrade
}

sub_macos () {
  for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.sh; do
    echo "Aplicando ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
  done
  echo "Concluído. Algumas mudanças podem requerer logout/reinício para ter efeito."
}

case $COMMAND_NAME in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${COMMAND_NAME} $@
    if [ $? = 127 ]; then
      echo "'$COMMAND_NAME' não é um comando conhecido ou possui erros." >&2
      sub_help
      exit 1
    fi
    ;;
esac
