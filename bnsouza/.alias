# Melhorando o comando 'll'
alias ll='ls -laFh'

# Melhorando o comando 'cd'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

certificado() {
    arquivo=$1
    senha=$2
    cnpj_opcional=$3 # CNPJ opcional para ser usado caso o CNPJ não seja encontrado no certificado

    echo " "

    # Verifica se o arquivo existe
    if [ ! -f "$arquivo" ]; then
        echo "Erro: O arquivo '$arquivo' não existe!"
        return 1
    fi

    # Tenta extrair informações usando openssl para verificar se a senha está correta
    if ! openssl_output=$(openssl pkcs12 -in "$arquivo" -nodes -passin pass:"$senha" -noout 2>&1); then
        echo "Erro ao processar o certificado. Verifique se a senha está correta.\n"
        echo "Saída do OpenSSL:"
        echo "$openssl_output"
        return 2
    fi

    # Extrai o CNPJ usando sed
    cnpj=$(openssl pkcs12 -in "$arquivo" -nodes -passin pass:"$senha" | openssl x509 -noout -subject | sed -n 's/.*\([0-9]\{14\}\).*/\1/p')

    if [ -n "$cnpj" ]; then
        echo "CNPJ: $cnpj\n"
    else
        echo "CNPJ não encontrado no certificado..."
        if [ -n "$cnpj_opcional" ]; then
            cnpj=$cnpj_opcional
            echo "Utilizando CNPJ opcional fornecido: $cnpj"
        else
            echo "Erro: CNPJ não fornecido e não encontrado no certificado!"
            return 3
        fi
    fi

    # Extrai a data de expiração e formata
    validade=$(openssl pkcs12 -in "$arquivo" -nodes -passin pass:"$senha" | openssl x509 -noout -enddate | cut -d= -f2)
    if [ -z "$validade" ]; then
        echo "Erro: Não foi possível extrair a data de validade do certificado."
        return 3
    fi

    # Converte e formata a data para os formatos utilizados
    novoNome=$(LC_ALL=C date -j -f "%b %d %H:%M:%S %Y %Z" "$validade" +"%Y%m%d%H%M%S")
    ISODate=$(LC_ALL=C date -j -f "%b %d %H:%M:%S %Y %Z" "$validade" +"%Y-%m-%dT%H:%M:%S")

    # Comando para criptografar a senha e imprimir
    senhaCrypt=$(php -r "echo openssl_encrypt('$senha', 'AES-128-ECB', 'c67ff511bd88d857');")
    if [ -z "$senhaCrypt" ]; then
        echo "Erro: Não foi possível criptografar a senha."
        return 4
    fi

    # Move o arquivo para o S3
    aws s3 cp "$arquivo" "s3://nfenarede-certificados/$cnpj/$novoNome.pfx" --profile prod

    # Imprime o resultado
    echo "\nJSON do Certificado para MongoDB:"
    echo "{\"validade\": new ISODate(\"$ISODate.000Z\"), \"s3\": \"$cnpj/$novoNome.pfx\", \"senha\": \"$senhaCrypt\"}"
}


nfe-download(){
    cnpj=$1
    a=$2
    mes=$3

    echo " "

    # Verifica se o cnpj tem 14 dígitos
    if [[ $cnpj =~ ^[0-9]{14}$ ]]; then
        cnpj=("$cnpj")
    else
        # Permite trocar o nome da empresa pelo CNPJ
        case "$cnpj" in
            keide)
                cnpj=("20877867000137")
                ;;
            proenter)
                cnpj=("34914041000105")
                ;;
            grid)
                cnpj=("35209579000181" "35507966000102")
                ;;
            amg)
                cnpj=("32827879000136" "76768563000439" "31901951000165" "76768563000196" "17011946000156" "76768563000510")
                ;;
            arthur)
                cnpj=("36451073000147" "23747853000197" "23749594000133")
                ;;
            jacare)
                cnpj=("17046931000123")
                ;;
            win)
                cnpj=("46673461000126" "53729797000200" "53729797000129")
                ;;
            *)
                ;;
        esac
    fi

    # Se não tiver CNPJ, sai com erro
    if [[ ${#cnpj[@]} -eq 0 ]]; then
        echo "Erro: Empresa não encontrada ou não reconhecida."
        return 1
    fi

    # Testa se o tipo de arquivo foi informado, senão pega todos
    if [ -z "$a" ]; then
        echo "Tipo de arquivo não informado, baixando todos..."
        a="*"
    fi

    # Testa se o mês foi informado, senão pega o mês anterior
    if [ -z "$mes" ]; then
        ano_atual=$(date +%y)
        mes_anterior=$(date -v-1m +%m)
        mes="${ano_atual}${mes_anterior}"
        echo "Mês não informado, definindo como mês anterior ($mes_anterior)..."
    fi

    # Testa se a pasta `~/Sites/arquivosNFe/` existe, senão cria
    if [ ! -d ~/Sites/arquivosNFe/ ]; then
        echo "Criando pasta para armazenar os arquivos..."
        mkdir ~/Sites/arquivosNFe/
    fi

    echo "------------------------------------------------------------------"

    for c in "${cnpj[@]}"; do
        # Baixa os arquivos do S3
        echo "Baixando arquivos do CNPJ $c referente ao ano/mês $mes..."
        aws s3 cp s3://nfenarede-notasfiscais/$c ~/Sites/arquivosNFe/$c/ --profile prod --recursive --exclude "*" --include "*$mes$c*.$a"

        # Cria um ZIP com os arquivos baixados
        zip -rj ~/Sites/arquivosNFe/$c-$mes.zip ~/Sites/arquivosNFe/$c/
    done
}
